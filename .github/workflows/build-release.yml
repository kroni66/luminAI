name: Build Release

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'

    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .flutter-plugins
          .flutter-plugins-dependencies
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: Install dependencies
      run: flutter pub get

    - name: Clean and Build Windows
      run: |
        flutter clean
        flutter pub cache repair
        flutter doctor -v
        flutter build windows --release

    - name: Create self-signed certificate for code signing
      run: |
        # Create a self-signed certificate for code signing
        $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=LuminAI Developer" -KeyUsage DigitalSignature -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -NotAfter (Get-Date).AddYears(1)
        $thumbprint = $cert.Thumbprint
        echo "CERT_THUMBPRINT=$thumbprint" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        # Export certificate for backup
        $certPath = "$env:TEMP\luminai_cert.pfx"
        Export-PfxCertificate -Cert "Cert:\CurrentUser\My\$thumbprint" -FilePath $certPath -Password (ConvertTo-SecureString -String "password123" -Force -AsPlainText)

    - name: Create Windows installer (without signing for now)
      run: |
        # Create installer without signing first to get it working
        # Will add signing later once signtool path is resolved
        flutter pub run inno_bundle
        move build\windows\x64\installer\Release\*.exe build\lumin-windows-${{ github.run_number }}.exe


    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: lumin-windows-${{ github.run_number }}
        path: build/lumin-windows-${{ github.run_number }}.exe

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        body: |
          Automatic release build ${{ github.run_number }}

          ## Changes
          - Automated build from commit ${{ github.sha }}

          ## Downloads
          - Windows: lumin-windows-${{ github.run_number }}.exe
        files: |
          lumin-windows-${{ github.run_number }}/lumin-windows-${{ github.run_number }}.exe
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
